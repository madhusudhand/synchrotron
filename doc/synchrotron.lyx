#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman palatino
\font_sans helvet
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Synchrotron: A Javascript 
\begin_inset Quotes eld
\end_inset

Operating System
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Author
Tony Garnock-Jones <tonyg@ccs.neu.edu>
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
Synchrotron
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/tonyg/synchrotron"

\end_inset


\end_layout

\end_inset

 is an experimental operating system that I wrote in bursts between 2008
 and 2012.
 My original idea was that it should be a system taking ideas from distributed
 version-control systems (DVCSs), from Smalltalk, and from TiddlyWiki.
\end_layout

\begin_layout Standard
In its current form, it includes
\end_layout

\begin_layout Itemize
a DVCS (git-like; written in Javascript) as its primary 
\begin_inset Quotes eld
\end_inset

filesystem
\begin_inset Quotes erd
\end_inset

, built around an implementation of Hunt & McIlroy's classic diff algorithm;
\end_layout

\begin_layout Itemize
a module system with imports, exports and renaming, containing 
\emph on
all
\emph default
 the Javascript code running in a Synchrotron instance;
\end_layout

\begin_layout Itemize
the ability to save itself as a single-page HTML application loaded from
 a 
\family typewriter
file://
\family default
 URL;
\end_layout

\begin_layout Itemize
the ability to include multiple 
\emph on
branches
\emph default
 in a single file, with one branch 
\begin_inset Quotes eld
\end_inset

currently checked out
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Itemize
the ability to 
\emph on
merge
\emph default
 branches; and
\end_layout

\begin_layout Itemize
the ability to 
\emph on
import
\emph default
 (and then merge) branches from other Synchrotron files on disk.
\end_layout

\begin_layout Standard
It uses jQuery, Knockout (a dataflow/FRP-like system) and Mustache (a template
 language) for model/view change propagation and rendering.
\end_layout

\begin_layout Standard
The central structure of the application is the 
\emph on
object memory
\emph default
, named after Smalltalk's object memory.
 Unlike Smalltalk, the Synchrotron object memory is versioned, but like
 Smalltalk, it is persistent.
 While Smalltalk's object memory contains every object in the system, Synchrotro
n's object memory only contains the persistent objects in the system.
 Transient objects (such as DOM nodes, event handlers and network connections)
 are represented as normal Javascript objects, and are recreated each time
 a Synchrotron HTML file is instantiated in a browser.
\end_layout

\begin_layout Standard
All the source code for a Synchrotron instance is contained in the object
 memory.
 When an instance boots, it extracts the current versions of needed modules
 and uses 
\family typewriter
eval
\family default
 to activate them.
\end_layout

\begin_layout Standard
I originally intended to use OMeta to rewrite the contained Javascript modules
 into a quasi-safe form, eliminating at least the obvious cases of global
 references and enforcing module interfaces, but in its current form Synchrotron
 relies on careful programming to avoid the creation of unwanted global
 variables.
\end_layout

\begin_layout Standard
The object memory includes a simple 
\family typewriter
inotify()
\family default
-like mechanism for notifying observers of changes to the persistent structure.
 This is used to refresh transient objects: reloading modules, re-rendering
 templates, re-applying stylesheets etc.
\end_layout

\begin_layout Section*
Synchrotron and Minimart
\end_layout

\begin_layout Standard
There is currently no support for concurrency within a running Synchrotron
 instance.
 It would be interesting to use my Network Calculus (NC) implementation,
 Minimart,
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/tonyg/js-marketplace"

\end_inset


\end_layout

\end_inset

 to structure concurrency and communication within a running instance.
\end_layout

\begin_layout Standard
One possible consequence might be that the object memory would simply be
 a serialised Minimart 
\emph on
World
\emph default
 instance, comprising its processes and their internal and externalised
 state.
 NC encourages clean separation of process state from process code, which
 would be useful to a system attempting to serialize running process instances.
\end_layout

\begin_layout Standard
Since Minimart has a built-in notion of broadcast and of state replication,
 the current ad-hoc 
\family typewriter
inotify()
\family default
-like mechanism could be retired.
 Processes would automatically be notified of changes in some externalised
 state that they had expressed interest in.
 This would also provide a natural approach to connecting Synchrotron instances
 with each other across a network.
\end_layout

\begin_layout Standard
Minimart has support for Web Workers for isolating untrusted code
\begin_inset Foot
status open

\begin_layout Plain Layout
Many caveats apply.
\end_layout

\end_inset

 and gaining a measure of parallelism to match NC's natural concurrency.
\end_layout

\begin_layout Standard
It would be very interesting to exploit the multi-language/language-neutral-comm
unication aspect of NC along with OMeta to build a multi-language environment
 within Synchrotron.
\end_layout

\begin_layout Section*
Synchrotron and Constraints
\end_layout

\begin_layout Standard
Given an NC-based communication system, recent CDG work on constraint solving
 could be incorporated into the system.
 Perhaps processes could advertise constraints they wished to have enforced,
 and a process could observe such constraints and solve them, broadcasting
 the solution to interested parties.
\end_layout

\begin_layout Section*
Synchrotron and node.js
\end_layout

\begin_layout Standard
The Synchrotron model could readily be implemented 
\begin_inset Quotes eld
\end_inset

on the server side
\begin_inset Quotes erd
\end_inset

 in node.js.
 Combining this idea with the use of Minimart to structure interaction between
 Synchrotron instances, it may be possible to treat Synchrotron as a 
\emph on
distributed
\emph default
 operating system.
\end_layout

\begin_layout Section*
Synchrotron and security
\end_layout

\begin_layout Standard
I have some ideas about the use of capabilities and certificates for access
 control in NC networks which may be useful in addressing questions of security
 in a distributed operating system.
\end_layout

\end_body
\end_document
